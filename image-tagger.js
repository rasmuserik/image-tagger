// Generated by CoffeeScript 1.6.3
(function() {
  var fileSelect, getMeta, getThumb, size, t0, time;

  size = 200;

  t0 = Date.now();

  time = function(desc) {
    var t1;
    t1 = Date.now();
    console.log(desc, t1 - t0);
    return t0 = t1;
  };

  getMeta = function(file, cb) {
    return localforage.getItem("meta:" + file.name, function(result) {
      var fr, ok;
      if (result) {
        return cb(result);
      }
      ok = false;
      setTimeout((function() {
        if (!ok) {
          return cb(null);
        }
      }), 20000);
      fr = new FileReader();
      fr.readAsArrayBuffer(file);
      return fr.onload = function() {
        var blob;
        blob = new Blob([fr.result], {
          type: "image/jpeg"
        });
        return JPEG.readExifMetaData(blob, function(err, meta) {
          ok = true;
          meta.filename = file.name;
          meta.size = file.size;
          return localforage.setItem("meta:" + file.name, meta, function() {
            return cb(meta);
          });
        });
      };
    });
  };

  getThumb = function(file, cb) {
    return localforage.getItem("thumb:" + file.name, function(result) {
      var cnv, ctx, fr, img;
      if (result) {
        return cb(result);
      }
      fr = new FileReader();
      cnv = document.createElement("canvas");
      ctx = cnv.getContext("2d");
      img = new Image();
      fr.readAsDataURL(file);
      fr.onerror = function() {
        return cb(null);
      };
      return fr.onload = function() {
        img.src = fr.result;
        img.onerror = function(err) {
          return cb(null);
        };
        return img.onload = function() {
          var h, scale, thumb, w;
          scale = Math.sqrt(size * size / img.width / img.height);
          w = Math.round(img.width * scale);
          h = Math.round(img.height * scale);
          cnv.width = ctx.width = w;
          cnv.height = ctx.height = h;
          ctx.drawImage(img, 0, 0, w, h);
          thumb = cnv.toDataURL("image/jpeg", 0.8);
          return localforage.setItem("thumb:" + file.name, thumb, function() {
            return cb(thumb);
          });
        };
      };
    });
  };

  fileSelect = function(e) {
    var ctx, file, files, img, processFiles, _i, _len, _ref;
    files = [];
    img = new Image();
    ctx = canvas.getContext("2d");
    processFiles = function(done) {
      var file;
      if (files.length === 0) {
        return typeof done === "function" ? done() : void 0;
      }
      file = files.pop();
      if (file.name.match(/\.jpg$/i)) {
        getMeta(file, function(meta) {
          return console.log(file.name, meta);
        });
        return getThumb(file, function(thumb) {
          im.src = thumb;
          return setTimeout((function() {
            return processFiles(done);
          }), 0);
        });
      } else {
        return setTimeout((function() {
          return processFiles(done);
        }), 0);
      }
    };
    _ref = e.target.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      files.push(file);
    }
    return processFiles();
  };

  document.getElementById("getfile").addEventListener("change", fileSelect);

}).call(this);
