// Generated by CoffeeScript 1.6.3
(function() {
  var arrBufToStr, dbGet, dbSet, fileSelect, size, t0, time;

  dbGet = void 0;

  dbSet = void 0;

  (function() {
    var db, req;
    db = void 0;
    req = indexedDB.open("keyvaluestore");
    req.onerror = function(e) {
      throw e;
    };
    return req.onsuccess = function(e) {
      return db = e;
    };
  })();

  arrBufToStr = function(arrBuf) {
    var arr, i, res, step, _i, _ref;
    step = 1000;
    arr = new Uint8Array(arrBuf);
    res = [];
    for (i = _i = 0, _ref = arr.length - 1; step > 0 ? _i <= _ref : _i >= _ref; i = _i += step) {
      res.push(String.fromCharCode.apply(null, [].slice.call(arr, i, i + step)));
    }
    return res.join("");
  };

  size = 150;

  t0 = Date.now();

  time = function(desc) {
    var t1;
    t1 = Date.now();
    console.log(desc, t1 - t0);
    return t0 = t1;
  };

  fileSelect = function(e) {
    var ctx, file, files, img, processFiles, _i, _len, _ref;
    files = [];
    img = new Image();
    ctx = canvas.getContext("2d");
    processFiles = function(done) {
      var file, fr;
      if (files.length === 0) {
        return typeof done === "function" ? done() : void 0;
      }
      file = files.pop();
      if (file.name.match(/\.jpg$/i)) {
        fr = new FileReader();
        fr.readAsArrayBuffer(file);
        return fr.onload = function() {
          var blob, ok;
          time("readAsArrayBuffer");
          blob = new Blob([fr.result], {
            type: "image/jpeg"
          });
          time("newBlob");
          ok = false;
          setTimeout((function() {
            if (!ok) {
              console.log("timeout error, trying next", file.name);
              return processFiles(done);
            }
          }), 20000);
          return JPEG.readExifMetaData(blob, function(err, exif) {
            ok = true;
            time("readExif");
            console.log(exif.Orientation);
            if (err) {
              console.log(err);
              return processFiles(done);
            }
            fr.readAsDataURL(blob);
            return fr.onload = function() {
              time("readAsDataUrl");
              img.src = fr.result;
              img.onerror = function(err) {
                console.log(err);
                return processFiles(done);
              };
              return img.onload = function() {
                var h, scale, thumb, w;
                time("img.src=..");
                scale = Math.sqrt(size * size / img.width / img.height);
                w = Math.round(img.width * scale);
                h = Math.round(img.height * scale);
                canvas.width = ctx.width = w;
                canvas.height = ctx.height = h;
                ctx.drawImage(img, 0, 0, w, h);
                time("drawImage");
                thumb = canvas.toDataURL("image/jpeg", 0.8);
                return localforage.setItem("thumb:" + file.name, thumb, function(err) {
                  time("todataurl+savetodatabase");
                  return setTimeout((function() {
                    return processFiles(done);
                  }), 0);
                });
              };
            };
          });
        };
      } else {
        return setTimeout((function() {
          return processFiles(done);
        }), 0);
      }
    };
    _ref = e.target.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      files.push(file);
    }
    return processFiles();
  };

  document.getElementById("getfile").addEventListener("change", fileSelect);

}).call(this);
